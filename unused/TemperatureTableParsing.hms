! This script tests how to parse a temperature table
!.

string	comfortname			= "comforttemperatures";		! name of the temperature table that should act as default comfort temperature

boolean debug				= true;


string	temperaturetable	   = "

	comforttemperatures:	test		0:00,16C
							test		0:01,16C
							test		23:59,16C	
							test		0:01,16C	0:02,17C
							test		0:00,16C								23:59,17C
							test		0:01,16C	0:02,17C					23:59,18C	
							test		23:58,16C 								23:59,17C
							test		0:00,16C				8:00,17C		23:58,18C

	presence.guests:		hall				   6:00,18.5C	7:30,19.5C	19:30,20C	22:30,17C	
							living								7:30,19C	19:30,20C	22:30,17C	
							kitchen				   6:00,18.5C	7:30,20C	20:30,17C				
							guests		0:00,17C				8:00,14C	19:00,16C	21:00,17.5C				

	presence.patrick:		hall		0:00,16C				7:30,17C	19:30,19C	22:00,17C	
							living		0:00,16C				7:30,17C	20:30,18C	22:00,17C	
							kitchen		0:00,16C				7:30,17C
							office		0:00,16C				7:30,20C	19:30,16.5C				
							sleeping							8:00,10C	21:00,15C				

	presence.isabel:		hall					6:00,18.5C	7:30,20.0C	20:00,17C	
							living								7:30,18.5C	20:00,17C	
							kitchen					6:00,18.5C	7:30,19.5C	20:00,17C				
							isabel								7:30,19.5C	19:30,17.5C				
 ";


!.
!--- no user setable parts below this point 
!.
string	currentyearmonthday	=	system.Date("%F ");
integer	timenow				=	(currentyearmonthday#system.Date("%X")).ToTime().ToInteger();
integer timedaystart		= 	(currentyearmonthday#"00:00:00").ToTime().ToInteger();
integer secondsthisday		= 	timenow-timedaystart;
																											if(debug){WriteLine("timenow:"#timenow#"\t secondsthisday:"#secondsthisday);}

string	ascii_space		= " ";
string	ascii_tabular	= "\t";
string	ascii_newline	= "\n";
string	ascii_return	= "\r";
string	table_delimiter	= "#";
string	roomtabledelimiter	= ascii_newline;
!.
!. create a tabulator seperated temperaturetable
!.


if(true)
{
	string	substring;
	string 	temporarytemperaturetable1;
	string 	temporarytemperaturetable2;
	
	foreach(substring, temperaturetable.Split(ascii_space) )
	{
		if( substring.Length() >0 )	{ temporarytemperaturetable1 = temporarytemperaturetable1 # table_delimiter # substring; }
	}
	foreach(substring, temporarytemperaturetable1.Split(ascii_return) )
	{
		if( substring.Length() >0 )	{ temporarytemperaturetable2 = temporarytemperaturetable2 # table_delimiter # substring; }
	}
	temperaturetable = "";
	
	foreach(substring, temporarytemperaturetable2 )
	{
		if( substring.Length() >0 )	{ temperaturetable = temperaturetable # table_delimiter # substring; }
	}
	temperaturetable = temperaturetable # ascii_newline;
	
	if(debug) {WriteLine("temperaturetable:"#temperaturetable);}
}




!.
!. go through every person that is present and add figure out hte room preferences 
!.

string	roomtemperatures;
string	comforttemperatures;

if(true)
{
	string	currentperson;
	boolean personispresent;
	integer personchangedtime;

	string	temperaturetableline;
	
	foreach( temperaturetableline, temperaturetable.Split(ascii_newline) )
	{																										!. if(debug){WriteLine("Line:"#temperaturetableline);}
		string	currentroom;
		integer	currentchangetime;
		string	currentchangetemp;
		integer	lastchangetime;
		string	lastchangetemp;
		
		string	temperaturetablepart;

		foreach(temperaturetablepart,temperaturetableline.Split(table_delimiter))
		{
			integer partlength = temperaturetablepart.Length();
		
			if( partlength > 0 )
			{																								!. if(debug){WriteLine("\nPart:"#temperaturetablepart#" length:"#partlength);}
				integer	colonposition	= temperaturetablepart.Find(":");
	
				if( -1 == colonposition )
				{
					currentroom			= temperaturetablepart;												if(debug){WriteLine("\tcurrentroom:"#temperaturetablepart);}
					currentchangetime	= -1;
					currentchangetemp	= "-1";
					lastchangetime		= -1;
					lastchangetemp		= "-1";
				}
				else
				{																									
					if( colonposition == (partlength-1) )
					{																									
						currentperson = temperaturetablepart.Substr(0,partlength-1);						if(debug){WriteLine("\nPerson:"#currentperson);}
						
						object  personvariable	  = dom.GetObject(currentperson);
						
						if( personvariable )
						{
									personispresent		= personvariable.Value();
							boolean personwaspresent	= personvariable.LastValue();
						
							if( personispresent != personwaspresent )
							{
								personchangedtime = personvariable.Timestamp().ToInteger();
							}
							else
							{
								personchangedtime = timedaystart-86400;
							}																				if(debug){WriteLine("\tpresence:"#personispresent#" since:"#personchangedtime.ToTime()#" waspresent:"#personwaspresent);}
						}
					}
					else
					{
						integer	timeseconds	= 	(currentyearmonthday#temperaturetablepart.StrValueByIndex(",",0)#":00").ToTime().ToInteger();
						string	temperature	=	temperaturetablepart.StrValueByIndex(",",1);

						if( timeseconds > timenow )
						{
							timeseconds = timeseconds - 86400;
						}
																											!.if(debug){WriteLine(" timeseconds:"#timeseconds#" temperature:"#temperature);}
																											!.if(debug){WriteLine("\troom:"#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp#","#lastchangetime.ToTime()#","#lastchangetemp);}
						
						if( -1 == currentchangetime )
						{
							currentchangetime	= timeseconds;
							currentchangetemp	= temperature;
							lastchangetime	   	= timeseconds-86400;
							lastchangetemp	   	= temperature;
						}
						else
						{																					!.if(debug){WriteLine("\troom:"#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp#","#lastchangetime.ToTime()#","#lastchangetemp);}
							if( timeseconds > currentchangetime )
							{
								lastchangetime	   	= currentchangetime;
								lastchangetemp	   	= currentchangetemp;
								currentchangetime   = timeseconds;
								currentchangetemp   = temperature;
							}
							else
							{
								if( timeseconds > lastchangetime )
								{
									lastchangetime		= timeseconds;
									lastchangetemp		= temperature;
								}
							}
						}
																											!.if(debug){WriteLine("\troom:"#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp#","#lastchangetime.ToTime()#","#lastchangetemp);}
					}
				}
			}
		}

		if( currentroom.Length() > 0)
		{																									if(debug){WriteLine("\tFinal:"#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp#","#lastchangetime.ToTime()#","#lastchangetemp);}
			if( personispresent )
			{																	   						 	
				roomtemperatures = roomtemperatures#roomtabledelimiter#currentroom#","#currentchangetime#","#currentchangetemp#","#lastchangetime#","#lastchangetemp;
			}
			else
			{
				if( comfortname == currentperson )
				{
					comforttemperatures = comforttemperatures#roomtabledelimiter#currentroom#","#currentchangetime#","#currentchangetemp#","#lastchangetime#","#lastchangetemp;
				}
			}
		}
	}
	if(debug){WriteLine("\nRoomtemperatures:"#roomtemperatures#"\nComforttemperatures:"#comforttemperatures);}
}
