!https://github.com/jollyjinx/homematic/blob/master/PresenceTriggersTemperature.hms
!
! This script changes the SET_TEMPERATURE of thermostats depending if a person is present
! in a room.
! If there are persons present in the house hand have a location/time/temperature table
! It uses the function/Gewerk 'Heating' to find out switched in that room to deduce presence of someone
! If there are openings in the 'Heating' function/Gewerk so not to heat
!.

real    miniumroomtemp          = 10.0;
real    openwindowtemp          = 5.0;
string  heatingfunctionname     = "Heating";            !. name of the function/"Gewerk" heating objects are put in
                                                        !. open doors and windows in a room will switch heating off
                                                        !. light,plugs and other switches in a room will signal present persons
                                                        !. and will change to comfort temperature if lower
                                                        
boolean letuserschangeinbetween = true;                 !. If the set temperature changes due to user interaction or other
                                                        !. programming, it will be set the thermostat temperature only when 
                                                        !. switches/doors or the temperature table will change.
                                                        
string  comfortname         = "comforttemperatures";    !. name of the temperature table person that should act as default comfort temperature
string  defaultroomname     = "anyroom";                !. name of a default room for the person
string  systemvariablename  = "thermostatrun";          !. optional to have a system variable to read/write last run date and status to.
integer howoftendowerun     = 5*60;                     !. How often this script runs automatically
boolean debug               = false;                    !. debugging of script - if set no changes will be made


string  temperaturetable    = "

    comforttemperatures:    anyroom     0:00,19C
                            living                              8:00,18.5C  16:00,19.0C 22:00,18C
                            office      0:00,20C

    presence.guests:        hall                   6:00,18.0C   7:30,19.5C  19:30,20C   22:30,17C   
                            living                              7:30,19C    19:30,20C   22:30,17C   
                            kitchen                6:00,18.0C   7:30,20C    20:30,17C               
                            guests      0:00,17C                8:00,14C    19:00,16C   21:00,17.5C             

    presence.patrick:       hall        0:00,16C                7:30,17C    19:30,19C   22:00,17C   
                            living      0:00,16C                7:30,17C    20:30,18C   22:00,17C   
                            kitchen     0:00,16C                7:30,17C
                            office      0:00,16C                7:30,20C    19:30,16.5C             
                            sleeping                            8:00,10C    21:00,15C               

    presence.isabel:        hall                    6:00,18.5C  7:30,20.0C  20:00,17C   
                            living                              7:30,18.5C  20:00,17C   
                            kitchen                 6:00,18.5C  7:30,19.5C  20:00,17C               
                            isabel                              7:30,19.5C  19:30,17.5C             
 ";

!.
!. Temperature table format: [presencevariablename]:\s+(\s*[roomname]\s+(HH?:MM,\d+(.\d)?C)+\n)+
!.
!--- no user setable parts below this point 
!.
string  currentyearmonthday =   system.Date("%F ");
integer timenow             =   (currentyearmonthday#system.Date("%X")).ToTime().ToInteger();
integer timedaystart        =   (currentyearmonthday#"00:00:00").ToTime().ToInteger();
integer secondsthisday      =   timenow-timedaystart;
integer lasttimerun         =   timenow-howoftendowerun;

!.
!. In case you have the system variable 
var     systemvariable      =   dom.GetObject(systemvariablename);
string  systemvariablestring;

if( letuserschangeinbetween && systemvariable )
{
    systemvariablestring    =   systemvariable.Variable().ToString();
    lasttimerun             =   systemvariablestring.StrValueByIndex("#",0).ToTime().ToInteger();
    systemvariablestring    =   timenow.ToTime().ToString()#"#";
}
                                                                                                        if(debug){WriteLine("timenow:"#timenow#"\t secondsthisday:"#secondsthisday#"\tlasttimerun"#lasttimerun.ToTime());}

string  ascii_space     = " ";
string  ascii_tabular   = "\t";
string  ascii_newline   = "\n";
string  ascii_return    = "\r";
string  table_delimiter = "#";
string  roomtabledelimiter  = ascii_newline;
!.
!. create a tabulator seperated temperaturetable
!.


if(true)
{
    string  substring;
    string  temporarytemperaturetable1;
    string  temporarytemperaturetable2;
    
    foreach(substring, temperaturetable.Split(ascii_space) )
    {
        if( substring.Length() >0 ) { temporarytemperaturetable1 = temporarytemperaturetable1 # table_delimiter # substring; }
    }
    foreach(substring, temporarytemperaturetable1.Split(ascii_return) )
    {
        if( substring.Length() >0 ) { temporarytemperaturetable2 = temporarytemperaturetable2 # table_delimiter # substring; }
    }
    temperaturetable = "";
    
    foreach(substring, temporarytemperaturetable2 )
    {
        if( substring.Length() >0 ) { temperaturetable = temperaturetable # table_delimiter # substring; }
    }
    temperaturetable = temperaturetable # ascii_newline;
    
    if(debug) {WriteLine("temperaturetable:"#temperaturetable);}
}




!.
!. go through every person that is present and add figure out hte room preferences 
!.

string  roomtemperatures;

if(true)
{
    string  currentperson;
    boolean personispresent;
    integer personchangedtime;

    string  comforttemperatures;
    string  temperaturetableline;
    
    foreach( temperaturetableline, temperaturetable.Split(ascii_newline) )
    {                                                                                                   !. if(debug){WriteLine("Line:"#temperaturetableline);}
        string  currentroom;
        integer currentchangetime;
        string  currentchangetemp;
        
        string  temperaturetablepart;

        foreach(temperaturetablepart,temperaturetableline.Split(table_delimiter))
        {
            integer partlength = temperaturetablepart.Length();
        
            if( partlength > 0 )
            {                                                                                           !. if(debug){WriteLine("\nPart:"#temperaturetablepart#" length:"#partlength);}
                integer colonposition   = temperaturetablepart.Find(":");
    
                if( -1 == colonposition )
                {
                    currentroom         = temperaturetablepart;                                         if(debug){WriteLine("\tcurrentroom:"#temperaturetablepart);}
                    currentchangetime   = -1;
                    currentchangetemp   = "-1";
                }
                else
                {                                                                                                   
                    if( colonposition == (partlength-1) )
                    {                                                                                                   
                        currentperson = temperaturetablepart.Substr(0,partlength-1);                    if(debug){WriteLine("\nPerson:"#currentperson);}
                        
                        object  personvariable    = dom.GetObject(currentperson);
                        
                        if( personvariable )
                        {
                                    personispresent     = personvariable.Value();
                            boolean personwaspresent    = personvariable.LastValue();
                        
                            if( personispresent != personwaspresent )
                            {
                                personchangedtime = personvariable.Timestamp().ToInteger();
                            }
                            else
                            {
                                personchangedtime = timedaystart-86400;
                            }                                                                           if(debug){WriteLine("\tpresence:"#personispresent#" since:"#personchangedtime.ToTime()#" waspresent:"#personwaspresent);}
                        }
                    }
                    else
                    {
                        integer timeseconds =   (currentyearmonthday#temperaturetablepart.StrValueByIndex(",",0)#":00").ToTime().ToInteger();
                        string  temperature =   temperaturetablepart.StrValueByIndex(",",1);

                        if( timeseconds > timenow )
                        {
                            timeseconds = timeseconds - 86400;
                        }                                                                               !.if(debug){WriteLine(" timeseconds:"#timeseconds#" temperature:"#temperature);}
                                                                                                        !.if(debug){WriteLine("\troom:"#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp);}
                        if( -1 == currentchangetime )
                        {
                            currentchangetime   = timeseconds;
                            currentchangetemp   = temperature;
                        }
                        else
                        {                                                                               !.if(debug){WriteLine("\troom:"#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp);}
                            if( timeseconds > currentchangetime )
                            {
                                currentchangetime   = timeseconds;
                                currentchangetemp   = temperature;
                            }
                        }                                                                               !.if(debug){WriteLine("\troom:"#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp);}
                    }
                }
            }
        }

        if( currentroom.Length() > 0)
        {                                                                                               if(debug){WriteLine("\tFinal:"#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp);}
            if( comfortname == currentperson )
            {
                comforttemperatures = comforttemperatures#roomtabledelimiter#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp#","#comfortname;
            }
            else
            {
                if( !personispresent )
                {
                    currentchangetemp = miniumroomtemp;
                }
                if( personchangedtime > currentchangetime )
                {
                    currentchangetime = personchangedtime;
                }
                roomtemperatures = roomtemperatures#roomtabledelimiter#currentroom#","#currentchangetime.ToTime()#","#currentchangetemp#","#currentperson;
            }
        }
    }
    roomtemperatures = roomtemperatures # comforttemperatures;
    if(debug){WriteLine("\nRoomtemperatures:"#roomtemperatures);}
}


string  roomid;
foreach( roomid, dom.GetObject(ID_ROOMS).EnumUsedIDs() )
{
    object  room                = dom.GetObject(roomid);                                                if(debug){WriteLine("\n\nroom:"#room);}
    boolean openwindowordoor    = false;
    boolean somebodyispresent   = false;
    integer somebodychangedtime = -1;
    string  thermostatdevices;
    string  channelid;
    
    foreach(channelid,dom.GetObject(room).EnumUsedIDs())
    {                                                                                                   !.if(debug){WriteLine("\t channelid:"#channelid);}
        object  channel             = dom.GetObject(channelid);                                         if(debug){WriteLine("\t channel:"#channel);}
        string  functionID;
        
        foreach(functionID,channel.ChnFunction().EnumUsedIDs())
        {
            object function=dom.GetObject(functionID);                                                      
            
            if( heatingfunctionname == function.Name() )
            {
                object  device      = dom.GetObject(channel.Device());                                  !.if(debug){WriteLine("\t device:"#device);}
                string  devicehssid = device.HSSID();                                                   if(debug){WriteLine("\t devicehssid:"#devicehssid);}

                if( "HM-CC-RT-DN" == devicehssid )
                {
                        var interface=dom.GetObject(channel.Interface());
                        thermostatdevices = thermostatdevices # "\t" # interface # "." # channel.Address();
                }
                else
                {
                    if( !openwindowordoor )
                    {
                        string datapointid;
                        foreach(datapointid,channel.DPs().EnumUsedIDs())
                        {
                            var datapoint   = dom.GetObject(datapointid);

                            if(OPERATION_READ & datapoint.Operations())
                            {
                                string  dpname = datapoint.Name();

                                if( -1 != dpname.Find(".STATE") )
                                {                                                                       if(debug){WriteLine("\t Datapoint:"#dpname);}
                                    if( 0 == devicehssid.Find("HM-Sec-") )
                                    {                                                                   if(debug){WriteLine("\t WindowOrDoor: state:"#datapoint.Value());}
                                        if( datapoint.Value() )
                                        {
                                            openwindowordoor = true;                                    
                                        }
                                    }
                                    else
                                    {
                                        if( datapoint.Value() )
                                        {                                                               if(debug){WriteLine("\t Somebody is present in room:"#datapoint.Value());}
                                            somebodyispresent = true;
                                        }
                                    }                                               
                                    integer lastactiontime = channel.LastDPActionTime().ToInteger();    if(debug){WriteLine("\t lastactiontime:"#lastactiontime.ToTime());}
                                    if( somebodychangedtime < lastactiontime )
                                    {
                                        somebodychangedtime = lastactiontime;
                                    }
                                }
                            }
                        }                           
                    }
                }																						if(debug){WriteLine("");}
            }
        }
    }
    
    if(debug){ WriteLine("\tThermostats:"#thermostatdevices#"\tSomebodyispresent in room:"#somebodyispresent#" since:"#somebodychangedtime.ToTime()#"\twindow or door open:"#openwindowordoor);}
    
    if( thermostatdevices.Length() )
    {
        real    newtemp     = miniumroomtemp;
        integer newtime     = -1;

        if( openwindowordoor )
        {
            newtemp     = openwindowtemp;
            newtime     = timenow;
        }
        else
        {
            string  roomtemperatureset;
            foreach(roomtemperatureset,roomtemperatures.Split(roomtabledelimiter) )
            {
                if( roomtemperatureset.Length() > 0 )
                {                                                                                           !.if(debug){WriteLine("\t testing room:"#roomtemperatureset);}
                    string  roomnameset =   roomtemperatureset.StrValueByIndex(",",0).ToString();           
                    
                    if( (roomnameset == room) || (roomnameset==defaultroomname) )
                    {                                                                                       !.if(debug){WriteLine("\t found room:"#roomtemperatureset);}
                        integer newtemptime;
		                real    newtempset;
                        string  newtempperson   =   roomtemperatureset.StrValueByIndex(",",3).ToString();
                        
                        if(newtempperson == comfortname)
                        {
	                        if( !somebodyispresent ) 
                            {
    	                        newtempset = miniumroomtemp;
                            }
                            else
                            {
                            	newtempset	=   roomtemperatureset.StrValueByIndex(",",2).ToFloat();
                            }
                            newtemptime     =   somebodychangedtime;
                        }
                        else
                        {
                           newtemptime	=   roomtemperatureset.StrValueByIndex(",",1).ToTime().ToInteger();
 		                   newtempset	=   roomtemperatureset.StrValueByIndex(",",2).ToFloat();
						}
						if( newtempset > newtemp)
						{
							newtemp = newtempset;
						}
						if( newtemptime > newtime)
						{
							newtime = newtemptime;
						}																					if(debug){WriteLine("\t newtemp:"#newtemp#"\tTime:"#newtime.ToTime()#"\tperson:"#newtempperson);}
                    }
                }
            }
        }																									!.if(debug){WriteLine("\n"#room#"\n\t newtemp:"#newtemp#"\tnewtime:"#newtime.ToTime());}
        
        
        if(     (!letuserschangeinbetween)
            ||  (newtime > (lasttimerun-howoftendowerun)) )
        {																									if(debug){WriteLine("WILL SET as it has changed. lastchange:"#newtime.ToTime()#" lasttime:"#lasttimerun.ToTime());};
            if( systemvariable ) { systemvariablestring = systemvariablestring #room #":"# newtemp # ",";}
            
            string  thermostatname;
            foreach(thermostatname,thermostatdevices)
            {                                                                                               if(debug){WriteLine("\t thermostatname: "#thermostatname);}
                integer currentmode = dom.GetObject(thermostatname#".CONTROL_MODE").Value();                if(debug){WriteLine("\t Current mode: "#currentmode);}
                																							!.modes:	0 = auto, 1 = manu, 2 = party, 3 = boost
                if( 0 == currentmode )																		
                {
                    real    termostattempcurrent    = dom.GetObject(thermostatname#".SET_TEMPERATURE").Value();         if(debug){WriteLine("\t settemp: "#termostattempcurrent);}
    
                    if( newtemp != termostattempcurrent )
                    {                                                                                       if(debug){WriteLine("Would change Temperature to: "#newtemp);}
                        if(!debug) { dom.GetObject(thermostatname#".SET_TEMPERATURE").State(newtemp);}
                    }
                }
            }
        }
        else
        {
            																								if(debug){WriteLine("NOTHING TO set as it has not changed. lastchange:"#newtime.ToTime()#" lasttime:"#lasttimerun.ToTime());};
        }
    }
} 

if( systemvariable && (!debug) )
{
    systemvariable.Variable(systemvariablestring);
}



